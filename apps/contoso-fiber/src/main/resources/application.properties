## application name
spring.application.name=contoso-fiber

# Contoso Configuration
contoso.retry.demo=${contoso.retry.demo}

## email, queue, demo-load, demo-dead-letter
contoso.suport-guide.request.service=${contoso.suport-guide.request.service}

spring.datasource.url=${spring.datasource.url}
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}
spring.jpa.hibernate.ddl-auto=validate

# Azure AD
spring.cloud.azure.active-directory.enabled=true
spring.cloud.azure.active-directory.credential.client-id=${spring.cloud.azure.active-directory.credential.client-id}
spring.cloud.azure.active-directory.credential.client-secret=${spring.cloud.azure.active-directory.credential.client-secret}
spring.cloud.azure.active-directory.profile.tenant-id=${spring.cloud.azure.active-directory.profile.tenant-id}

# Redis
spring.data.redis.host=${spring.data.redis.host}
spring.data.redis.port=${spring.data.redis.port}
spring.data.redis.password=${spring.data.redis.password}
spring.data.redis.ssl.enabled=true

# Spring Session to leverage Redis to back a web applicationâ€™s HttpSession
spring.session.redis.namespace=spring:session

# Spring Cloud Stream - Azure Service Bus
spring.cloud.function.definition=consumeemailresponse
spring.cloud.azure.servicebus.namespace=${spring.cloud.azure.servicebus.namespace}
spring.cloud.stream.servicebus.bindings.produceemailrequest-out-0.producer.entity-type=queue
spring.cloud.stream.servicebus.bindings.consumeemailresponse-in-0.consumer.entity-type=queue
spring.cloud.stream.servicebus.bindings.consumeemailresponse-in-0.consumer.auto-complete: false
spring.cloud.stream.bindings.produceemailrequest-out-0.destination=${spring.cloud.stream.bindings.produceemailrequest-out-0.destination}
spring.cloud.stream.bindings.consumeemailresponse-in-0.destination=${spring.cloud.stream.bindings.consumeemailresponse-in-0.destination}

# Spring Cloud Azure Storage
spring.cloud.azure.storage.blob.account-name=${spring.cloud.azure.storage.blob.account-name}
spring.cloud.azure.storage.blob.container-name=${spring.cloud.azure.storage.blob.container-name}

# Actuator
management.endpoints.web.exposure.include=metrics,health,info,retry,retryevents

#Circuit breaker
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: false

#circuit breaker defaults
resilience4j.circuitbreaker.metrics.enabled=true
resilience4j.circuitbreaker.metrics.legacy.enabled=true
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=6
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=15s
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.eventConsumerBufferSize=10


#circuit breaker retry config
resilience4j.retry.metrics.enabled=true
resilience4j.retry.metrics.legacy.enabled=true
resilience4j.retry.configs.default.maxAttempts=3
resilience4j.retry.configs.default.waitDuration=3s
resilience4j.retry.configs.default.retryExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.retry.configs.default.retryExceptions[1]=java.lang.RuntimeException

#ServicePlan Circuit Breaker policy should use default config
resilience4j.circuitbreaker.instances.servicePlan.baseConfig=default

#ServicePlan retry policy should use default config
resilience4j.retry.instances.servicePlan.baseConfig=default
